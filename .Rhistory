pie(slices, labels = labels, main = "Peak overlapping with ATAC-Seq peaks", col=c('lightblue', 'orange'))
slices <- ("C:/Users/wcloe/Desktop/2) Magistrale/ADVANCED GENOMICS AND EPIGENOMICS")
pie(slices, labels = labels, main = "Peak overlapping with ATAC-Seq peaks", col=c('lightblue', 'orange'))
slices <- ("C:/Users/wcloe/Desktop/2) Magistrale/ADVANCED GENOMICS AND EPIGENOMICS/idr_with_atac.bed")
pie(slices, labels = labels, main = "Peak overlapping with ATAC-Seq peaks", col=c('lightblue', 'orange'))
slices <- read.table ("C:/Users/wcloe/Desktop/2) Magistrale/ADVANCED GENOMICS AND EPIGENOMICS/idr_with_atac.bed")
pie(slices, labels = labels, main = "Peak overlapping with ATAC-Seq peaks", col=c('lightblue', 'orange'))
slices <- read.table ("C:/Users/wcloe/Desktop/2) Magistrale/ADVANCED GENOMICS AND EPIGENOMICS/idr_with_atac.bed", header = FALSE, col.names = c("chr", "start", "end"))
pie(slices, labels = labels, main = "Peak overlapping with ATAC-Seq peaks", col=c('lightblue', 'orange'))
idr_with_atac <- read.table ("C:/Users/wcloe/Desktop/2) Magistrale/ADVANCED GENOMICS AND EPIGENOMICS/idr_with_atac.bed", header = FALSE, col.names = c("chr", "start", "end"))
# Calcola la lunghezza delle regioni sovrapposte e non sovrapposte
overlapping_count <- nrow(idr_with_atac)
non_overlapping_count <- nrow(idr_summits) - overlapping_count
# Verifica se ci sono regioni sovrapposte
if (overlapping_count > 0) {
# Crea un vettore di etichette e un vettore di colori
labels <- c("Sovrapposizione con ATAC", "Nessuna sovrapposizione con ATAC")
colors <- c('lightblue', 'orange')
# Crea il grafico a torta
pie(c(overlapping_count, non_overlapping_count), labels = labels, main = "Peak sovrapposte con le vette ATAC-Seq", col = colors)
} else {
cat("Nessuna regione sovrapposta con ATAC-Seq. Impossibile creare il grafico a torta.")
}
idr_with_atac <- read.table ("C:/Users/wcloe/Downloads/idr_with_atac.bed", header = FALSE, col.names = c("chr", "start", "end"))
pie(idr_with_atac, labels = labels, main = "Peak overlapping with ATAC-Seq peaks", col=c('lightblue', 'orange'))
str(idr_with_atac)
idr_with_atac <- read.table ("C:/Users/wcloe/Downloads/idr_with_atac.bed", header = FALSE)
str(idr_with_atac)
idr_with_atac <- read.table ("C:/Users/wcloe/Downloads/idr_with_atac.bed", header = FALSE, col.names = c("chr", "start", "end"))
str(idr_with_atac)
# Calcola la lunghezza delle regioni sovrapposte e non sovrapposte
overlapping_count <- nrow(idr_with_atac)
non_overlapping_count <- nrow(idr_summits) - overlapping_count
idr_summits <- read.table("C:/Users/wcloe/Downloads/idr_summits.bed", header = FALSE, col.names = c("chr", "start", "end"))
atac_peaks <- read.table("C:/Users/wcloe/Downloads/atac_peaks.bed", header = FALSE, col.names = c("chr", "start", "end"))
idr_with_atac <- read.table ("C:/Users/wcloe/Downloads/idr_with_atac.bed", header = FALSE, col.names = c("chr", "start", "end"))
idr_summits <- read.table("C:/Users/wcloe/Downloads/idr_summits.bed", header = FALSE)
atac_peaks <- read.table("C:/Users/wcloe/Downloads/atac_peaks.bed", header = FALSE)
idr_with_atac <- read.table ("C:/Users/wcloe/Downloads/idr_with_atac.bed", header = FALSE)
str(idr_with_atac)
# Calcola la lunghezza delle regioni sovrapposte e non sovrapposte
overlapping_count <- nrow(idr_with_atac)
non_overlapping_count <- nrow(idr_summits) - overlapping_count
# Verifica se ci sono regioni sovrapposte
if (overlapping_count > 0) {
# Crea un vettore di etichette e un vettore di colori
labels <- c("Sovrapposizione con ATAC", "Nessuna sovrapposizione con ATAC")
colors <- c('lightblue', 'orange')
# Crea il grafico a torta
pie(c(overlapping_count, non_overlapping_count), labels = labels, main = "Peak sovrapposte con le vette ATAC-Seq", col = colors)
} else {
cat("Nessuna regione sovrapposta con ATAC-Seq. Impossibile creare il grafico a torta.")
}
pie(idr_with_atac, labels = labels, main = "Peak overlapping with ATAC-Seq peaks", col=c('lightblue', 'orange'))
# Verifica se ci sono regioni sovrapposte
if (overlapping_count > 0) {
# Calcola le percentuali
overlapping_percent <- (overlapping_count / nrow(idr_summits)) * 100
non_overlapping_percent <- 100 - overlapping_percent
# Crea un vettore di etichette e un vettore di colori
labels <- c(paste("Sovrapposizione con ATAC\n", sprintf("%.2f%%", overlapping_percent)),
paste("Nessuna sovrapposizione con ATAC\n", sprintf("%.2f%%", non_overlapping_percent)))
colors <- c('lightblue', 'orange')
# Crea il grafico a torta con percentuali e legenda
pie(c(overlapping_count, non_overlapping_count), labels = labels, main = "Peak sovrapposte con le vette ATAC-Seq", col = colors)
legend("topright", legend = c("Sovrapposizione con ATAC", "Nessuna sovrapposizione con ATAC"), fill = colors, cex = 0.8)
} else {
cat("Nessuna regione sovrapposta con ATAC-Seq. Impossibile creare il grafico a torta.")
}
library(ggplot2)
ggplot(c(overlapping_count, non_overlapping_count), aes(x = "", y = perc, fill = answer)) +
geom_col(color = "black") +
geom_label(aes(label = labels), color = c(1, "white", "white"),
position = position_stack(vjust = 0.5),
show.legend = FALSE) +
guides(fill = guide_legend(title = "Answer")) +
scale_fill_viridis_d() +
coord_polar(theta = "y") +
theme_void()
install.packages("ggplot2")
library(ggplot2)
ggplot(c(overlapping_count, non_overlapping_count), aes(x = "", y = perc, fill = answer)) +
geom_col(color = "black") +
geom_label(aes(label = labels), color = c(1, "white", "white"),
position = position_stack(vjust = 0.5),
show.legend = FALSE) +
guides(fill = guide_legend(title = "Answer")) +
scale_fill_viridis_d() +
coord_polar(theta = "y") +
theme_void()
library(ggplot2)
ggplot(c(overlapping_count, non_overlapping_count), aes(x = "", y = perc, fill = answer)) +
geom_col(color = "black") +
geom_label(aes(label = labels), color = c(1, "white", "white"),
position = position_stack(vjust = 0.5),
show.legend = FALSE) +
guides(fill = guide_legend(title = "Answer")) +
scale_fill_viridis_d() +
coord_polar(theta = "y") +
theme_void()
ds <- c(overlapping_count, non_overlapping_count)
ggplot(ds, aes(x = "", y = perc, fill = answer)) +
geom_col(color = "black") +
geom_label(aes(label = labels), color = c(1, "white", "white"),
position = position_stack(vjust = 0.5),
show.legend = FALSE) +
guides(fill = guide_legend(title = "Answer")) +
scale_fill_viridis_d() +
coord_polar(theta = "y") +
theme_void()
# Crea un vettore di etichette e un vettore di colori
labels <- c(paste(sprintf("%.2f%%", overlapping_percent)),
paste(sprintf("%.2f%%", non_overlapping_percent)))
colors <- c('lightblue', 'orange')
# Crea il grafico a torta con percentuali e legenda
pie(c(overlapping_count, non_overlapping_count), labels = labels, main = "Peak sovrapposte con le vette ATAC-Seq", col = colors)
legend("topright", legend = c("Sovrapposizione con ATAC", "Nessuna sovrapposizione con ATAC"), fill = colors, cex = 0.8)
# Verifica se ci sono regioni sovrapposte
if (overlapping_count > 0) {
# Calcola le percentuali
overlapping_percent <- (overlapping_count / nrow(idr_summits)) * 100
non_overlapping_percent <- 100 - overlapping_percent
# Crea un vettore di etichette e un vettore di colori
labels <- c(paste(sprintf("%.2f%%", overlapping_percent)),
paste(sprintf("%.2f%%", non_overlapping_percent)))
colors <- c('lightblue', 'orange')
# Crea il grafico a torta con percentuali e legenda
pie(c(overlapping_count, non_overlapping_count), labels = labels, main = "Peak sovrapposte con le vette ATAC-Seq", col = colors)
legend("topright", legend = c("Sovrapposizione con ATAC", "Nessuna sovrapposizione con ATAC"), fill = colors, cex = 0.8)
} else {
cat("Nessuna regione sovrapposta con ATAC-Seq. Impossibile creare il grafico a torta.")
}
legend("topright", legend = c("In common with ATAC", "Not in common with ATAC"), fill = colors, cex = 0.8)
# Verifica se ci sono regioni sovrapposte
if (overlapping_count > 0) {
# Calcola le percentuali
overlapping_percent <- (overlapping_count / nrow(idr_summits)) * 100
non_overlapping_percent <- 100 - overlapping_percent
# Crea un vettore di etichette e un vettore di colori
labels <- c(paste(sprintf("%.2f%%", overlapping_percent)),
paste(sprintf("%.2f%%", non_overlapping_percent)))
colors <- c('lightblue', 'orange')
# Crea il grafico a torta con percentuali e legenda
pie(c(overlapping_count, non_overlapping_count), labels = labels, main = "Peak sovrapposte con le vette ATAC-Seq", col = colors)
legend("topright", legend = c("In common with ATAC", "Not in common with ATAC"), fill = colors, cex = 0.8)
} else {
cat("Nessuna regione sovrapposta con ATAC-Seq. Impossibile creare il grafico a torta.")
}
idr_with_atac <- read.table ("C:/Users/wcloe/Downloads/idr_with_atac.bed", header = FALSE)
str(idr_with_atac)
idr_with_atac <- read.table ("C:/Users/wcloe/Downloads/idr_with_atac.bed", header = FALSE)
str(idr_with_atac)
pie(idr_with_atac, labels = labels, main = "Peak overlapping with ATAC-Seq peaks", col=c('lightblue', 'orange'))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rsamtools")
install.packages("devtools")
library(devtools)
create_package(path = "~/path/to/ReadAligner")
create_package(path = "~/Desktop/2) Magistrale/ReadAligner")
create_package(path = "~/Desktop/2) Magistrale/ReadAligner")
setwd("C:/Users/wcloe/Desktop/P1")
library(devtools)
devtools::create("GenoTypeR")
current.node = as.package("GenoTypeR")
load_all(current.node$path)
document(current.node)
devtools::build()
setwd("GenoTypeR")
devtools::build()
devtools::check()
devtools::install()
library(GenoTypeR)
library(devtools)
use_vignette("GenoTypeR")
build_vignettes("GenoTypeR")
rlang::last_trace()
devtools::build()
devtools::install()
devtools::test()
devtools::test("GenoTypeR")
usethis::use_test()
rlang::last_trace()
testthat::test_check("GenoTypeR")
test_check("GenoTypeR")
library(testthat)
test_check("GenoTypeR")
setwd("C:/Users/wcloe/Desktop/P1")
test_check("GenoTypeR")
setwd("GenoTypeR")
devtools::test()
devtools::document()
devtools::test()
devtools::run_examples()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::load_all()
library(BiocCheck)
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
devtools::document()
devtools::build()
devtools::check()
BiocCheck::BiocCheck()
